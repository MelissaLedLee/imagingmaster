chart = {
  const svg = d3.create("svg")
      .attr("viewBox", [0, 0, width, height]);

  svg.append("g")
      .call(xAxis);

  svg.append("g")
      .call(yAxis);
  
  svg.append("path")
      .datum(data)
      .attr("fill", "none")
      .attr("stroke", "steelblue")
      .attr("stroke-width", 1.5)
      .attr("stroke-linejoin", "round")
      .attr("stroke-linecap", "round")
      .attr("d", line);
  
  return svg.node();
}
height = 500
height = 500
margin = Object {top: 20, right: 30, bottom: 30, left: 40}
margin = ({top: 20, right: 30, bottom: 30, left: 40})
x = ƒ(n)
x = d3.scaleTime()
    .domain(d3.extent(data, d => d.date))
    .range([margin.left, width - margin.right])
y = ƒ(n)
y = d3.scaleLinear()
    .domain([0, d3.max(data, d => d.value)]).nice()
    .range([height - margin.bottom, margin.top])
xAxis = ƒ(g)
yAxis = g => g
    .attr("transform", `translate(${margin.left},0)`)
    .call(d3.axisLeft(y))
    .call(g => g.select(".domain").remove())
    .call(g => g.select(".tick:last-of-type text").clone()
        .attr("x", 3)
        .attr("text-anchor", "start")
        .attr("font-weight", "bold")
        .text(data.y))
line = ƒ(a)
line = d3.line()
    .defined(d => !isNaN(d.value))
    .x(d => x(d.date))
    .y(d => y(d.value))
data = Array(14) [Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, y: "# women enrolled"]
data = Object.assign((await d3.csv("https://gist.githubusercontent.com/dingmei/d1ab5dd8ff9597d71b3fba3dc26347fe/raw/31229a7b96e75fd53281c9ec4a3eb6671b42a179/ucsd_cds_admission_data_2005_to_2018", d3.autoType)).map(({year, fulltime_women_enrolled}) => ({date: new Date(year, 0, 0), value: Number(fulltime_women_enrolled.replace(",",""))})), {y: "# women enrolled"})
d3 = Object {event: null, format: ƒ(t), formatPrefix: ƒ(t, n), timeFormat: ƒ(t), timeParse: ƒ(t), utcFormat: ƒ(t), utcParse: ƒ(t), FormatSpecifier: ƒ(t), active: ƒ(t, n), arc: ƒ(), area: ƒ(), areaRadial: ƒ(), ascending: ƒ(t, n), autoType: ƒ(t), axisBottom: ƒ(t), axisLeft: ƒ(t), axisRight: ƒ(t), axisTop: ƒ(t), bisect: ƒ(n, e, r, i), bisectLeft: ƒ(n, e, r, i), …}
d3 = require("d3@5")
